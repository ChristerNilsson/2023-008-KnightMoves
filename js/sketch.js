// Generated by CoffeeScript 2.5.1
var H, Knight, N, NOQUEEN, Position, Queen, R, Rect, W, audio, c, clicks, counts, draw, drawBoard, info, intro, knight, knightHops, logg, makeKnightHops, makeQueenHops, marginx, marginy, mousePressed, moveKnight, newGame, os, placeQueen, queen, queenHops, r, range, reSize, rects, results, setup, showLittera, start, state, sum, taken, targets,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

range = _.range;

logg = console.log;

logg(navigator.userAgent);

os = navigator.userAgent.includes('Windows') ? 'Windows' : 'Mac';

audio = new Audio('shortclick.mp3');

intro = ["Select a queen"];

sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

NOQUEEN = [3, 4, 10, 13, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 39, 41, 42, 43, 44, 45, 46, 50, 53, 59, 60];

N = 8;

W = 0;

H = 0;

R = Math.floor(W / 10);

c = (n) => {
  return modulo(n, N);
};

r = (n) => {
  return Math.floor(n / N);
};

rects = [];

Queen = '♛';

Knight = '♘';

queen = 0;

queenHops = []; // indexes of squares taken by queen

targets = []; // indexes of squares that knight must visit

state = 0;

marginx = 0;

marginy = 0;

makeKnightHops = (knight) => {
  var c2, col, dc, dr, index, j, k, len, len1, r2, ref, ref1, res, row;
  if (knight === -1) {
    return [];
  }
  res = [];
  col = c(knight);
  row = r(knight);
  ref = [-2, -1, 1, 2];
  for (j = 0, len = ref.length; j < len; j++) {
    dc = ref[j];
    ref1 = [-2, -1, 1, 2];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      dr = ref1[k];
      if (abs(dc) === abs(dr)) {
        continue;
      }
      c2 = col + dc;
      r2 = row + dr;
      index = c2 + 8 * r2;
      if (indexOf.call(range(8), c2) >= 0 && indexOf.call(range(8), r2) >= 0 && indexOf.call(targets, index) >= 0) {
        res.push(index);
      }
    }
  }
  res.sort(function(a, b) {
    return a - b;
  });
  return res;
};

knight = 0;

knightHops = [];

clicks = 0;

counts = []; // number of clicks for each target

taken = 0;

results = ['Move the knight to the yellow ring'];

start = 0;

window.onresize = function() {
  return reSize();
};

reSize = function() {
  var ci, col, index, j, len, ref, ri, x, y;
  H = min(Math.floor(innerHeight / 11), Math.floor(innerWidth / 9));
  W = H;
  R = Math.floor(W / 10);
  resizeCanvas(innerWidth, innerHeight);
  rects = [];
  marginx = (innerWidth - 10 * W) / 2 + Math.floor(W / 3);
  marginy = H;
  ref = range(N * N);
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    ri = r(index);
    ci = c(index);
    col = (ri + ci) % 2 ? 'lightgray' : 'darkgray';
    x = 3 * W / 2 + W * c(index);
    y = H * (7 - r(index));
    rects.push(new Rect(index, marginx + x, marginy + y, W, H, col));
  }
  return rects.push(new Rect(64, marginx + W * 0.6, marginy + 8 * H, 0.8 * W, 0.8 * H, col));
};

makeQueenHops = () => {
  var ci, cq, dc, dr, i, j, len, ref, ri, rq;
  ref = range(N * N);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    ci = c(i);
    ri = r(i);
    cq = c(queen);
    rq = r(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    if (ci === cq || ri === rq || dc === dr) {
      queenHops.push(i);
    }
  }
  return logg({queenHops});
};

placeQueen = (index) => {
  logg('Q' + Position(index));
  if (NOQUEEN.includes(index)) {
    logg('No queen here');
    return;
  }
  queen = index;
  makeQueenHops();
  targets = range(N * N).filter((i) => {
    return !queenHops.includes(i);
  });
  targets.sort(function(a, b) {
    return b - a;
  });
  knight = targets[0];
  knightHops = makeKnightHops(knight);
  counts = [];
  taken++;
  return state++;
};

newGame = function() {
  queen = 0;
  queenHops = [];
  knightHops = [];
  targets = [];
  state = 0;
  knight = 0;
  clicks = 0;
  counts = [];
  taken = 0;
  return start = new Date();
};

moveKnight = (index) => {
  var col, dx, dy, row;
  if (queenHops.includes(index)) {
    return;
  }
  col = c(index);
  row = r(index);
  dx = abs(col - c(knight));
  dy = abs(row - r(knight));
  if (indexOf.call(knightHops, index) >= 0) {
    audio.play();
    knight = index;
    knightHops = makeKnightHops(knight);
    clicks++;
    if (targets[taken] === knight) {
      taken++;
      counts.push(clicks);
      clicks = 0;
    }
  }
  if (taken === targets.length) {
    results = [`Q${Position(queen)}: ${sum(counts)} moves took ${(new Date() - start) / 1000} seconds`, "Click Ok"];
    knightHops = [];
    return state = 2;
  }
};

Rect = class Rect {
  constructor(index1, x1, y1, w, h, col4) {
    this.ring = this.ring.bind(this);
    this.index = index1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.col = col4;
  }

  draw() {
    fill(this.col);
    rect(this.x, this.y, this.w, this.h);
    if (this.index === 64) {
      fill('black');
      textSize(0.5 * W);
      return text("Ok", this.x, this.y);
    }
  }

  inside(x, y) {
    return abs(x - this.x) <= W / 2 && abs(y - this.y) <= H / 2;
  }

  click() {
    
    // audio.pause()
    if (state === 0) {
      return placeQueen(this.index);
    } else if (state === 1) {
      return moveKnight(this.index);
    } else if (state === 2) {
      return newGame();
    }
  }

  drawPiece(name) {
    textSize(1.1 * W);
    fill("black");
    if (os === 'Windows') {
      text(name, this.x, this.y + 0.1 * H);
    }
    if (os !== 'Windows') {
      return text(name, this.x, this.y + 0.0 * H);
    }
  }

  drawQueenHop() {
    var ref;
    if (r(queen) % 2 === 0 && this.index !== queen && (ref = this.index, indexOf.call(queenHops, ref) >= 0)) {
      return ellipse(this.x, this.y, 3 * R);
    }
  }

  drawKnightHop() {
    var ref;
    if (c(queen) % 2 === 0 && (ref = this.index, indexOf.call(knightHops, ref) >= 0)) {
      return ellipse(this.x, this.y, 3 * R);
    }
  }

  text(txt) {
    textAlign(CENTER, CENTER);
    textSize(0.5 * W);
    fill('black');
    return text(txt, this.x, this.y);
  }

  ring() {
    noFill();
    push();
    strokeWeight(3);
    stroke('yellow');
    ellipse(this.x, this.y, 5 * R);
    return pop();
  }

};

setup = () => {
  reSize();
  newGame();
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  return createCanvas(innerWidth, innerHeight);
};

Position = function(index) {
  return "abcdefgh"[c(index)] + "12345678"[r(index)];
};

info = function() {
  var i, j, len, result, results1, temp;
  fill('black');
  textAlign(CENTER, CENTER);
  textSize(0.5 * W);
  temp = state === 0 ? intro : results;
  results1 = [];
  for (i = j = 0, len = temp.length; j < len; i = ++j) {
    result = temp[i];
    results1.push(text(result, Math.floor(innerWidth / 2), 10 * H + i * H / 2));
  }
  return results1;
};

drawBoard = () => {
  var j, len, n, rect, ref, results1;
  n = [64, 64, 65][state];
  ref = rects.slice(0, n);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    rect = ref[j];
    results1.push(rect.draw());
  }
  return results1;
};

showLittera = (flag) => {
  var col1, col2, col3, i, j, len, ref, results1, x, y;
  col1 = "black";
  col2 = "white";
  textSize(0.5 * W);
  ref = range(N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    x = W * (1.5 + i) + marginx;
    y = W * (N - 1 - i) + marginy;
    col3 = flag ? [col2, col1][i % 2] : col1;
    noFill();
    if (flag && i % 2 === 0) {
      circle(x, W * (N + 1), 0.6 * W);
    }
    fill(col1);
    if (flag && i % 2 === 0) {
      circle(marginx + W / 2, y, 0.6 * W);
    }
    text("abcdefgh"[i], x, W * (N + 1));
    if (i % 2 === 0) {
      fill(col3);
    } else {
      fill(col1);
    }
    results1.push(text("12345678"[i], marginx + W / 2, y));
  }
  return results1;
};

draw = () => {
  var i, j, k, l, len, len1, len2, len3, m, ref, ref1;
  background(128);
  drawBoard();
  showLittera(state === 0);
  info();
  textAlign(CENTER, CENTER);
  if (state === 1) {
    rects[queen].drawPiece(Queen);
    rects[knight].drawPiece(Knight);
  }
  textSize(0.55 * W);
  ref = range(taken);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (targets[i] !== knight) {
      rects[targets[i]].text(counts[i]);
    }
  }
  fill('black');
  for (k = 0, len1 = queenHops.length; k < len1; k++) {
    i = queenHops[k];
    rects[i].drawQueenHop();
  }
  fill('white');
  for (l = 0, len2 = knightHops.length; l < len2; l++) {
    i = knightHops[l];
    rects[i].drawKnightHop();
  }
  if (state === 0) {
    ref1 = range(N * N);
    for (m = 0, len3 = ref1.length; m < len3; m++) {
      i = ref1[m];
      if (!NOQUEEN.includes(i)) {
        rects[i].drawPiece(Queen);
      }
    }
  }
  if (state === 1) {
    rects[targets[taken]].ring();
  }
  if (state === 2) {
    rects[queen].drawPiece(Queen);
    return rects[knight].drawPiece(Knight);
  }
};

mousePressed = function() {
  var j, len, rect, results1;
  if (state === 2) {
    rect = rects[64];
    if (rect.inside(mouseX, mouseY)) {
      return rect.click();
    }
  } else {
// newGame()
// return
    results1 = [];
    for (j = 0, len = rects.length; j < len; j++) {
      rect = rects[j];
      if (rect.inside(mouseX, mouseY)) {
        results1.push(rect.click());
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxjQUFBLEVBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQTtFQUFBOzs7QUFBQSxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNWLElBQUEsR0FBTyxPQUFPLENBQUM7O0FBQ2YsSUFBQSxDQUFLLFNBQVMsQ0FBQyxTQUFmOztBQUNBLEVBQUEsR0FBUSxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQXBCLENBQTZCLFNBQTdCLENBQUgsR0FBK0MsU0FBL0MsR0FBOEQ7O0FBRW5FLEtBQUEsR0FBUSxJQUFJLEtBQUosQ0FBVSxnQkFBVjs7QUFFUixLQUFBLEdBQVEsQ0FBQyxnQkFBRDs7QUFFUixHQUFBLEdBQU0sQ0FBQyxHQUFELENBQUEsR0FBQTtTQUFTLEdBQUcsQ0FBQyxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUEsR0FBQTtXQUFVLENBQUEsR0FBSTtFQUFkLENBQUQsQ0FB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YXZpZ2F0b3IudXNlckFnZW50XHJcbm9zID0gaWYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyAnV2luZG93cycgdGhlbiAnV2luZG93cycgZWxzZSAnTWFjJ1xyXG5cclxuYXVkaW8gPSBuZXcgQXVkaW8gJ3Nob3J0Y2xpY2subXAzJ1xyXG5cclxuaW50cm8gPSBbXCJTZWxlY3QgYSBxdWVlblwiXVxyXG5cclxuc3VtID0gKGFycilcdD0+IGFyci5yZWR1Y2UoKChhLCBiKSA9PiBhICsgYiksIDApXHJcblxyXG5OT1FVRUVOID0gWzMsNCwxMCwxMywxNywxOCwxOSwyMCwyMSwyMiwyNCwyNiwyOSwzMSwzMiwzNCwzNywzOSw0MSw0Miw0Myw0NCw0NSw0Niw1MCw1Myw1OSw2MF1cclxuTiA9IDhcclxuVyA9IDBcclxuSCA9IDBcclxuUiA9IFcvLzEwXHJcbmMgPSAobikgPT4gbiAlJSBOXHJcbnIgPSAobikgPT4gbiAvLyBOXHJcbnJlY3RzID0gW11cclxuXHJcblF1ZWVuID0gJ+KZmydcclxuS25pZ2h0ID0gJ+KZmCdcclxucXVlZW4gPSAwXHJcbnF1ZWVuSG9wcyA9IFtdICMgaW5kZXhlcyBvZiBzcXVhcmVzIHRha2VuIGJ5IHF1ZWVuXHJcbnRhcmdldHMgPSBbXSAjIGluZGV4ZXMgb2Ygc3F1YXJlcyB0aGF0IGtuaWdodCBtdXN0IHZpc2l0XHJcbnN0YXRlID0gMFxyXG5tYXJnaW54ID0gMFxyXG5tYXJnaW55ID0gMFxyXG5cclxubWFrZUtuaWdodEhvcHMgPSAoa25pZ2h0KSA9PlxyXG5cdGlmIGtuaWdodD09LTEgdGhlbiByZXR1cm4gW11cclxuXHRyZXMgPSBbXVxyXG5cdGNvbCA9IGMga25pZ2h0XHJcblx0cm93ID0gciBrbmlnaHRcclxuXHRmb3IgZGMgaW4gWy0yLC0xLDEsMl1cclxuXHRcdGZvciBkciBpbiBbLTIsLTEsMSwyXVxyXG5cdFx0XHRpZiBhYnMoZGMpID09IGFicyhkcikgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRjMiA9IGNvbCArIGRjXHJcblx0XHRcdHIyID0gcm93ICsgZHJcclxuXHRcdFx0aW5kZXggPSBjMis4KnIyXHJcblx0XHRcdGlmIGMyIGluIHJhbmdlKDgpIGFuZCByMiBpbiByYW5nZSg4KSBhbmQgaW5kZXggaW4gdGFyZ2V0cyB0aGVuIHJlcy5wdXNoIGluZGV4XHJcblx0cmVzLnNvcnQgKGEsYikgLT4gYS1iXHJcblx0cmVzXHJcblxyXG5rbmlnaHQgPSAwXHJcbmtuaWdodEhvcHMgPSBbXVxyXG5jbGlja3MgPSAwXHJcbmNvdW50cyA9IFtdXHQjIG51bWJlciBvZiBjbGlja3MgZm9yIGVhY2ggdGFyZ2V0XHJcbnRha2VuID0gMFxyXG5yZXN1bHRzID0gWydNb3ZlIHRoZSBrbmlnaHQgdG8gdGhlIHllbGxvdyByaW5nJ11cclxuXHJcbnN0YXJ0ID0gMFxyXG5cclxud2luZG93Lm9ucmVzaXplID0gLT4gcmVTaXplKClcclxuXHJcbnJlU2l6ZSA9IC0+XHJcblx0SCA9IG1pbihpbm5lckhlaWdodC8vMTEsaW5uZXJXaWR0aC8vOSlcclxuXHRXID0gSFxyXG5cdFIgPSBXLy8xMFxyXG5cdHJlc2l6ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cdHJlY3RzID0gW11cclxuXHRtYXJnaW54ID0gKGlubmVyV2lkdGgtMTAqVykvMiArIFcvLzNcclxuXHRtYXJnaW55ID0gSFxyXG5cdGZvciBpbmRleCBpbiByYW5nZSBOKk5cclxuXHRcdHJpID0gciBpbmRleFxyXG5cdFx0Y2kgPSBjIGluZGV4XHJcblx0XHRjb2wgPSBpZiAocmkgKyBjaSkgJSAyIHRoZW4gJ2xpZ2h0Z3JheScgZWxzZSAnZGFya2dyYXknXHJcblx0XHR4ID0gMypXLzIgKyBXICogYyBpbmRleFxyXG5cdFx0eSA9IEggKiAoNy1yIGluZGV4KVxyXG5cdFx0cmVjdHMucHVzaCBuZXcgUmVjdCBpbmRleCwgbWFyZ2lueCt4LCBtYXJnaW55K3ksIFcsSCwgY29sXHJcblx0cmVjdHMucHVzaCBuZXcgUmVjdCA2NCwgbWFyZ2lueCtXKjAuNiwgbWFyZ2lueSs4KkgsIDAuOCpXLDAuOCpILCBjb2xcclxuXHJcbm1ha2VRdWVlbkhvcHMgPSA9PlxyXG5cdGZvciBpIGluIHJhbmdlIE4qTlxyXG5cdFx0Y2kgPSBjIGlcclxuXHRcdHJpID0gciBpXHJcblx0XHRjcSA9IGMgcXVlZW5cclxuXHRcdHJxID0gciBxdWVlblxyXG5cdFx0ZGMgPSBhYnMgY2kgLSBjcVxyXG5cdFx0ZHIgPSBhYnMgcmkgLSBycVxyXG5cdFx0aWYgY2kgPT0gY3Egb3IgcmkgPT0gcnEgb3IgZGMgPT0gZHIgdGhlbiBxdWVlbkhvcHMucHVzaCBpXHJcblx0bG9nZyB7cXVlZW5Ib3BzfVxyXG5cclxucGxhY2VRdWVlbiA9IChpbmRleCkgPT5cclxuXHRsb2dnICdRJyArIFBvc2l0aW9uIGluZGV4XHJcblx0aWYgTk9RVUVFTi5pbmNsdWRlcyBpbmRleFxyXG5cdFx0bG9nZyAnTm8gcXVlZW4gaGVyZSdcclxuXHRcdHJldHVyblxyXG5cclxuXHRxdWVlbiA9IGluZGV4XHJcblx0bWFrZVF1ZWVuSG9wcygpXHJcblx0dGFyZ2V0cyA9IHJhbmdlKE4qTikuZmlsdGVyIChpKSA9PiBub3QgcXVlZW5Ib3BzLmluY2x1ZGVzIGlcclxuXHR0YXJnZXRzLnNvcnQgKGEsYikgLT4gYi1hXHJcblx0a25pZ2h0ID0gdGFyZ2V0c1swXVxyXG5cdGtuaWdodEhvcHMgPSBtYWtlS25pZ2h0SG9wcyBrbmlnaHRcclxuXHRjb3VudHMgPSBbXVxyXG5cdHRha2VuKytcclxuXHRzdGF0ZSsrXHJcblxyXG5uZXdHYW1lID0gKCkgLT5cclxuXHRxdWVlbiA9IDBcclxuXHRxdWVlbkhvcHMgPSBbXVxyXG5cdGtuaWdodEhvcHMgPSBbXVxyXG5cdHRhcmdldHMgPSBbXVxyXG5cdHN0YXRlID0gMFxyXG5cdGtuaWdodCA9IDBcclxuXHRjbGlja3MgPSAwXHJcblx0Y291bnRzID0gW11cclxuXHR0YWtlbiA9IDBcclxuXHRzdGFydCA9IG5ldyBEYXRlKClcclxuXHJcbm1vdmVLbmlnaHQgPSAoaW5kZXgpID0+XHJcblx0aWYgcXVlZW5Ib3BzLmluY2x1ZGVzIGluZGV4IHRoZW4gcmV0dXJuXHJcblx0Y29sID0gYyBpbmRleFxyXG5cdHJvdyA9IHIgaW5kZXhcclxuXHRkeCA9IGFicyBjb2wgLSBjIGtuaWdodFxyXG5cdGR5ID0gYWJzIHJvdyAtIHIga25pZ2h0XHJcblx0aWYgaW5kZXggaW4ga25pZ2h0SG9wc1xyXG5cdFx0YXVkaW8ucGxheSgpXHJcblx0XHRrbmlnaHQgPSBpbmRleFxyXG5cdFx0a25pZ2h0SG9wcyA9IG1ha2VLbmlnaHRIb3BzIGtuaWdodFxyXG5cdFx0Y2xpY2tzKytcclxuXHRcdGlmIHRhcmdldHNbdGFrZW5dID09IGtuaWdodFxyXG5cdFx0XHR0YWtlbisrXHJcblx0XHRcdGNvdW50cy5wdXNoIGNsaWNrc1xyXG5cdFx0XHRjbGlja3MgPSAwXHJcblx0aWYgdGFrZW4gPT0gdGFyZ2V0cy5sZW5ndGhcclxuXHRcdHJlc3VsdHMgPSBbXCJRI3tQb3NpdGlvbiBxdWVlbn06ICN7c3VtKGNvdW50cyl9IG1vdmVzIHRvb2sgI3sobmV3IERhdGUoKS1zdGFydCkvMTAwMH0gc2Vjb25kc1wiLFwiQ2xpY2sgT2tcIl1cclxuXHRcdGtuaWdodEhvcHMgPSBbXVxyXG5cdFx0c3RhdGUgPSAyXHJcblxyXG5jbGFzcyBSZWN0XHJcblx0Y29uc3RydWN0b3IgOiAoQGluZGV4LCBAeCxAeSwgQHcsQGgsIEBjb2wpIC0+XHJcblx0ZHJhdyA6IC0+XHJcblx0XHRmaWxsIEBjb2xcclxuXHRcdHJlY3QgQHgsIEB5LCBAdywgQGhcclxuXHRcdGlmIEBpbmRleCA9PSA2NFxyXG5cdFx0XHRmaWxsICdibGFjaydcclxuXHRcdFx0dGV4dFNpemUgMC41KldcclxuXHRcdFx0dGV4dCBcIk9rXCIsIEB4LCBAeVxyXG5cdGluc2lkZSA6ICh4LCB5KSAtPiBhYnMoeC1AeCkgPD0gVy8yIGFuZCBhYnMoeS1AeSkgPD0gSC8yXHJcblx0Y2xpY2sgOiAtPiBcclxuXHRcdCMgYXVkaW8ucGF1c2UoKVxyXG5cdFx0aWYgc3RhdGU9PTAgdGhlbiBwbGFjZVF1ZWVuIEBpbmRleFxyXG5cdFx0ZWxzZSBpZiBzdGF0ZT09MSB0aGVuIG1vdmVLbmlnaHQgQGluZGV4XHJcblx0XHRlbHNlIGlmIHN0YXRlPT0yIHRoZW4gbmV3R2FtZSgpXHJcblx0ZHJhd1BpZWNlIDogKG5hbWUpIC0+XHJcblx0XHR0ZXh0U2l6ZSAxLjEgKiBXXHJcblx0XHRmaWxsIFwiYmxhY2tcIlxyXG5cdFx0aWYgb3M9PSdXaW5kb3dzJyB0aGVuIHRleHQgbmFtZSxAeCxAeSswLjEqSFxyXG5cdFx0aWYgb3MhPSdXaW5kb3dzJyB0aGVuIHRleHQgbmFtZSxAeCxAeSswLjAqSFxyXG5cdGRyYXdRdWVlbkhvcCAgOiAtPiBpZiByKHF1ZWVuKSUyPT0wIGFuZCBAaW5kZXghPXF1ZWVuIGFuZCBAaW5kZXggaW4gcXVlZW5Ib3BzIHRoZW4gZWxsaXBzZSBAeCwgQHksIDMqUlxyXG5cdGRyYXdLbmlnaHRIb3AgOiAtPiBpZiBjKHF1ZWVuKSUyPT0wIGFuZCBAaW5kZXggaW4ga25pZ2h0SG9wcyB0aGVuIGVsbGlwc2UgQHgsIEB5LCAzKlJcclxuXHR0ZXh0IDogKHR4dCkgLT5cclxuXHRcdHRleHRBbGlnbiBDRU5URVIsIENFTlRFUlxyXG5cdFx0dGV4dFNpemUgMC41KldcclxuXHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0dGV4dCB0eHQsIEB4LCBAeVxyXG5cdHJpbmcgOiA9PlxyXG5cdFx0bm9GaWxsKClcclxuXHRcdHB1c2goKVxyXG5cdFx0c3Ryb2tlV2VpZ2h0IDNcclxuXHRcdHN0cm9rZSAneWVsbG93J1xyXG5cdFx0ZWxsaXBzZSBAeCwgQHksIDUqUlxyXG5cdFx0cG9wKClcclxuXHJcbnNldHVwID0gPT5cclxuXHRyZVNpemUoKVxyXG5cdG5ld0dhbWUoKVxyXG5cdHJlY3RNb2RlIENFTlRFUlxyXG5cdHRleHRBbGlnbiBDRU5URVIsIENFTlRFUlxyXG5cdGNyZWF0ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cclxuUG9zaXRpb24gPSAoaW5kZXgpIC0+IFwiYWJjZGVmZ2hcIltjIGluZGV4XSArIFwiMTIzNDU2NzhcIltyIGluZGV4XVxyXG5cclxuaW5mbyA9IC0+XHJcblx0ZmlsbCAnYmxhY2snXHJcblx0dGV4dEFsaWduIENFTlRFUiwgQ0VOVEVSXHJcblx0dGV4dFNpemUgMC41KldcclxuXHR0ZW1wID0gaWYgc3RhdGU9PTAgdGhlbiBpbnRybyBlbHNlIHJlc3VsdHNcclxuXHRmb3IgcmVzdWx0LGkgaW4gdGVtcFxyXG5cdFx0dGV4dCByZXN1bHQsaW5uZXJXaWR0aC8vMiwgMTAqSCArIGkqSC8yXHJcblxyXG5kcmF3Qm9hcmQgPSA9PlxyXG5cdG4gPSBbNjQsNjQsNjVdW3N0YXRlXVxyXG5cdHJlY3QuZHJhdygpIGZvciByZWN0IGluIHJlY3RzLnNsaWNlIDAsblxyXG5cclxuc2hvd0xpdHRlcmEgPSAoZmxhZykgPT5cclxuXHRjb2wxID0gXCJibGFja1wiXHJcblx0Y29sMiA9IFwid2hpdGVcIlxyXG5cdHRleHRTaXplIDAuNSpXXHJcblx0Zm9yIGkgaW4gcmFuZ2UgTlxyXG5cdFx0eCA9IFcqKDEuNStpKSArIG1hcmdpbnhcclxuXHRcdHkgPSBXKihOLTEtaSkgKyBtYXJnaW55XHJcblx0XHRjb2wzID0gaWYgZmxhZyB0aGVuIFtjb2wyLGNvbDFdW2klMl0gZWxzZSBjb2wxXHJcblx0XHRub0ZpbGwoKVxyXG5cdFx0aWYgZmxhZyBhbmQgaSUyPT0wIHRoZW4gY2lyY2xlIHgsIFcqKE4rMSksIDAuNipXXHJcblx0XHRmaWxsIGNvbDFcclxuXHRcdGlmIGZsYWcgYW5kIGklMj09MCB0aGVuIGNpcmNsZSBtYXJnaW54K1cvMiwgeSwwLjYqV1xyXG5cdFx0dGV4dCBcImFiY2RlZmdoXCJbaV0sIHgsIFcqKE4rMSlcclxuXHRcdGlmIGklMj09MCB0aGVuIGZpbGwgY29sMyBlbHNlIGZpbGwgY29sMVxyXG5cdFx0dGV4dCBcIjEyMzQ1Njc4XCJbaV0sIG1hcmdpbngrVy8yLCB5XHJcblxyXG5kcmF3ID0gPT5cclxuXHRiYWNrZ3JvdW5kIDEyOFxyXG5cdGRyYXdCb2FyZCgpXHJcblx0c2hvd0xpdHRlcmEgc3RhdGU9PTBcclxuXHRpbmZvKClcclxuXHJcblx0dGV4dEFsaWduIENFTlRFUiwgQ0VOVEVSXHJcblx0aWYgc3RhdGUgPT0gMVxyXG5cdFx0cmVjdHNbcXVlZW5dLmRyYXdQaWVjZSBRdWVlblxyXG5cdFx0cmVjdHNba25pZ2h0XS5kcmF3UGllY2UgS25pZ2h0XHJcblxyXG5cdHRleHRTaXplIDAuNTUqV1xyXG5cdGZvciBpIGluIHJhbmdlIHRha2VuXHJcblx0XHRpZiB0YXJnZXRzW2ldICE9IGtuaWdodFxyXG5cdFx0XHRyZWN0c1t0YXJnZXRzW2ldXS50ZXh0IGNvdW50c1tpXVxyXG5cclxuXHRmaWxsICdibGFjaydcclxuXHRmb3IgaSBpbiBxdWVlbkhvcHNcclxuXHRcdHJlY3RzW2ldLmRyYXdRdWVlbkhvcCgpXHJcblxyXG5cdGZpbGwgJ3doaXRlJ1xyXG5cdGZvciBpIGluIGtuaWdodEhvcHNcclxuXHRcdHJlY3RzW2ldLmRyYXdLbmlnaHRIb3AoKVxyXG5cclxuXHRpZiBzdGF0ZSA9PSAwXHJcblx0XHRmb3IgaSBpbiByYW5nZShOKk4pXHJcblx0XHRcdGlmIG5vdCBOT1FVRUVOLmluY2x1ZGVzIGlcclxuXHRcdFx0XHRyZWN0c1tpXS5kcmF3UGllY2UoUXVlZW4pXHJcblxyXG5cdGlmIHN0YXRlID09IDFcclxuXHRcdHJlY3RzW3RhcmdldHNbdGFrZW5dXS5yaW5nKClcclxuXHJcblx0aWYgc3RhdGUgPT0gMlxyXG5cdFx0cmVjdHNbcXVlZW5dLmRyYXdQaWVjZSBRdWVlblxyXG5cdFx0cmVjdHNba25pZ2h0XS5kcmF3UGllY2UgS25pZ2h0XHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPlxyXG5cdGlmIHN0YXRlID09IDJcclxuXHRcdHJlY3QgPSByZWN0c1s2NF1cclxuXHRcdGlmIHJlY3QuaW5zaWRlIG1vdXNlWCwgbW91c2VZIHRoZW4gcmVjdC5jbGljaygpXHJcblx0XHQjIG5ld0dhbWUoKVxyXG5cdFx0IyByZXR1cm5cclxuXHRlbHNlXHJcblx0XHRmb3IgcmVjdCBpbiByZWN0c1xyXG5cdFx0XHRpZiByZWN0Lmluc2lkZSBtb3VzZVgsIG1vdXNlWSB0aGVuIHJlY3QuY2xpY2soKVxyXG4iXX0=
//# sourceURL=c:\github\2023-008-KnightMoves\coffee\sketch.coffee