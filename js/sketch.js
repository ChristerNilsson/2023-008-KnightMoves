// Generated by CoffeeScript 2.5.1
var H, Knight, N, NOQUEEN, Queen, R, Rect, W, arrClicks, c, cirkel, clicks, draw, illegal, knight, logg, makeIllegals, mousePressed, moveKnight, placeQueen, queen, r, range, rects, setup, state, taken, targets,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

range = _.range;

logg = console.log;

cirkel = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

NOQUEEN = [10, 13, 17, 18, 19, 20, 21, 22, 26, 29, 34, 37, 41, 42, 43, 44, 45, 46, 50, 53];

N = 8;

W = 40;

H = 40;

R = Math.floor(W / 10);

c = (n) => {
  return modulo(n, N);
};

r = (n) => {
  return Math.floor(n / N);
};

rects = [];

Queen = '♛';

Knight = '♘';

queen = 0;

illegal = []; // indexes of squares taken by queen

targets = []; // indexes of squares that knight must visit

state = 0;

knight = 0;

clicks = 0;

arrClicks = []; // number of clicks for each target

taken = 0;

makeIllegals = () => {
  var ci, cq, dc, dr, i, j, len, ref, results, ri, rq;
  ref = range(N * N);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    ci = c(i);
    ri = r(i);
    cq = c(queen);
    rq = r(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    if (ci === cq || ri === rq || dc === dr) {
      results.push(illegal.push(i));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

placeQueen = (index) => {
  if (NOQUEEN.includes(index)) {
    logg('No queen here');
    return;
  }
  queen = index;
  makeIllegals();
  targets = range(N * N).filter((i) => {
    return !illegal.includes(i);
  });
  knight = targets[0];
  arrClicks.push(0);
  taken++;
  return state++;
};

moveKnight = (index) => {
  var col, dx, dy, row;
  if (illegal.includes(index)) {
    return;
  }
  col = c(index);
  row = r(index);
  dx = abs(col - c(knight));
  dy = abs(row - r(knight));
  if (dx * dx + dy * dy === 5) {
    knight = index;
    clicks++;
    if (targets[taken] === knight) {
      taken++;
      return arrClicks.push(clicks);
    }
  }
};

Rect = class Rect {
  constructor(index1, x1, y1, w, h, col1) {
    this.index = index1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.col = col1;
  }

  draw() {
    fill(this.col);
    return rect(this.x, this.y, this.w, this.h);
  }

  inside(x, y) {
    return (this.x <= x && x <= this.x + this.w) && (this.y <= y && y <= this.y + this.h);
  }

  click() {
    if (state === 0) {
      return placeQueen(this.index);
    } else {
      return moveKnight(this.index);
    }
  }

};

setup = () => {
  var ci, col, index, j, len, ref, results, ri, x, y;
  logg('setup');
  textAlign(CENTER, CENTER);
  createCanvas(windowWidth, windowHeight);
  ref = range(N * N);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    ri = r(index);
    ci = c(index);
    col = (ri + ci) % 2 ? 'yellow' : 'brown';
    x = W * c(index);
    y = H * r(index);
    results.push(rects.push(new Rect(index, x, y, W, H, col)));
  }
  return results;
};

draw = () => {
  var i, j, k, l, len, len1, len2, rect, ref, x, y;
  background(128);
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    rect.draw();
  }
  textSize(W);
  if (state === 1) {
    x = W / 2 + W * c(queen);
    y = H / 2 + H * r(queen);
    fill("black");
    text(Queen, x, y + 5);
    x = W / 2 + W * c(knight);
    y = H / 2 + H * r(knight);
    text(Knight, x, y + 5);
  }
  for (k = 0, len1 = illegal.length; k < len1; k++) {
    i = illegal[k];
    if (i !== queen) {
      x = W / 2 + W * c(i);
      y = H / 2 + H * r(i);
      cirkel(x, y, R);
    }
  }
  textSize(0.55 * W);
  ref = range(taken);
  for (l = 0, len2 = ref.length; l < len2; l++) {
    i = ref[l];
    if (targets[i] !== knight) {
      x = W / 2 + W * c(targets[i]);
      y = H / 2 + H * r(targets[i]);
      text(arrClicks[i], x, y + 5);
    }
  }
  if (state === 1) {
    x = W / 2 + W * c(targets[taken]);
    y = H / 2 + H * r(targets[taken]);
    noFill();
    return cirkel(x, y, 2 * R);
  }
};

mousePressed = function() {
  var j, len, rect, results;
  results = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    if (rect.inside(mouseX, mouseY)) {
      results.push(rect.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-008-KnightMoves\coffee\sketch.coffee