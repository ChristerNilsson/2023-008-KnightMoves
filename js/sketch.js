// Generated by CoffeeScript 2.5.1
var H, Knight, N, NOQUEEN, Position, Queen, R, Rect, W, arrClicks, c, clicks, draw, drawBoard, illegal, info, intro, knight, logg, makeIllegals, mousePressed, moveKnight, newGame, placeQueen, queen, r, range, reSize, rects, results, setup, start, state, sum, taken, targets,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

range = _.range;

logg = console.log;

intro = ['Click on a square to place the queen.', 'Avoid the dots and the queen.', 'The ring will move when taken.', 'Repeat for all squares.', 'Qa8 is an easy starter.', 'Qd5 is a good challenge, 158 moves.'];

sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

NOQUEEN = [10, 13, 17, 18, 19, 20, 21, 22, 26, 29, 34, 37, 41, 42, 43, 44, 45, 46, 50, 53];

N = 8;

W = 0;

H = 0;

R = Math.floor(W / 10);

c = (n) => {
  return 7 - modulo(n, N);
};

r = (n) => {
  return Math.floor(n / N);
};

rects = [];

Queen = '♛';

Knight = '♘';

queen = 0;

illegal = []; // indexes of squares taken by queen

targets = []; // indexes of squares that knight must visit

state = 0;

knight = 0;

clicks = 0;

arrClicks = []; // number of clicks for each target

taken = 0;

results = ['Move the knight to the ring'];

start = 0;

window.onresize = function() {
  return reSize();
};

reSize = function() {
  var ci, col, index, j, len, margin, ref, results1, ri, x, y;
  H = min(Math.floor(innerHeight / 13), Math.floor(innerWidth / 9));
  W = H;
  H = W;
  R = Math.floor(W / 10);
  resizeCanvas(innerWidth, innerHeight);
  rects = [];
  margin = Math.floor((innerWidth - 8 * W) / 2);
  ref = range(N * N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    ri = r(index);
    ci = c(index);
    col = (ri + ci) % 2 ? 'brown' : 'yellow';
    x = W / 2 + W * c(index);
    y = H + H * r(index);
    results1.push(rects.push(new Rect(index, margin + x, y, W, H, col)));
  }
  return results1;
};

makeIllegals = () => {
  var ci, cq, dc, dr, i, j, len, ref, results1, ri, rq;
  ref = range(N * N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    ci = c(i);
    ri = r(i);
    cq = c(queen);
    rq = r(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    if (ci === cq || ri === rq || dc === dr) {
      results1.push(illegal.push(i));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

placeQueen = (index) => {
  logg('Q' + Position(index));
  if (NOQUEEN.includes(index)) {
    logg('No queen here');
    return;
  }
  queen = index;
  makeIllegals();
  targets = range(N * N).filter((i) => {
    return !illegal.includes(i);
  });
  knight = targets[0];
  arrClicks.push(0);
  taken++;
  return state++;
};

newGame = function() {
  queen = 0;
  illegal = [];
  targets = [];
  state = 0;
  knight = 0;
  clicks = 0;
  arrClicks = [];
  taken = 0;
  return start = new Date();
};

moveKnight = (index) => {
  var col, dx, dy, row;
  if (illegal.includes(index)) {
    return;
  }
  col = c(index);
  row = r(index);
  dx = abs(col - c(knight));
  dy = abs(row - r(knight));
  if (dx * dx + dy * dy === 5) {
    knight = index;
    clicks++;
    if (targets[taken] === knight) {
      taken++;
      arrClicks.push(clicks);
      clicks = 0;
    }
  }
  if (taken === targets.length) {
    // results.pop()
    results.push(`Q${Position(queen)}: ${sum(arrClicks)} moves took ${(new Date() - start) / 1000} seconds`);
    return state = 2;
  }
};

Rect = class Rect {
  constructor(index1, x1, y1, w, h, col1) {
    this.coin = this.coin.bind(this);
    this.index = index1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.col = col1;
  }

  draw() {
    fill(this.col);
    return rect(this.x, this.y, this.w, this.h);
  }

  inside(x, y) {
    return abs(x - this.x) <= W / 2 && abs(y - this.y) <= H / 2;
  }

  click() {
    if (state === 0) {
      return placeQueen(this.index);
    } else {
      return moveKnight(this.index);
    }
  }

  drawPiece(name) {
    textSize(W);
    fill("black");
    return text(name, this.x, this.y);
  }

  drawDot() {
    if (this.index !== queen && (r(queen) + c(queen)) % 2 === 0) {
      return ellipse(this.x, this.y, 2 * R);
    }
  }

  text(txt) {
    textAlign(CENTER, CENTER);
    textSize(0.5 * W);
    fill('black');
    return text(txt, this.x, this.y);
  }

  coin() {
    noFill();
    push();
    strokeWeight(3);
    ellipse(this.x, this.y, 5 * R);
    return pop();
  }

};

setup = () => {
  reSize();
  newGame();
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  return createCanvas(innerWidth, innerHeight);
};

Position = function(index) {
  return `${"abcdefgh"[c(index)]}${"87654321"[r(index)]}`;
};

info = function() {
  var i, j, len, result, results1, temp;
  fill('black');
  textAlign(CENTER, CENTER);
  textSize(0.5 * W);
  temp = state === 0 ? intro : results;
  results1 = [];
  for (i = j = 0, len = temp.length; j < len; i = ++j) {
    result = temp[i];
    results1.push(text(result, Math.floor(innerWidth / 2), 9 * H + i * H / 2));
  }
  return results1;
};

drawBoard = () => {
  var j, len, rect, results1;
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    results1.push(rect.draw());
  }
  return results1;
};

draw = () => {
  var i, j, k, len, len1, ref;
  background(128);
  drawBoard();
  info();
  textAlign(CENTER, CENTER);
  if (state > 0) {
    rects[queen].drawPiece(Queen);
    rects[knight].drawPiece(Knight);
  }
  for (j = 0, len = illegal.length; j < len; j++) {
    i = illegal[j];
    rects[i].drawDot();
  }
  textSize(0.55 * W);
  ref = range(taken);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    if (targets[i] !== knight) {
      rects[targets[i]].text(arrClicks[i]);
    }
  }
  if (state === 1) {
    return rects[targets[taken]].coin();
  }
};

mousePressed = function() {
  var j, len, rect, results1;
  if (state === 2) {
    newGame();
    return;
  }
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    if (rect.inside(mouseX, mouseY)) {
      results1.push(rect.click());
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-008-KnightMoves\coffee\sketch.coffee