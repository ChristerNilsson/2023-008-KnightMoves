// Generated by CoffeeScript 2.5.1
var H, Knight, N, NOQUEEN, Position, Queen, R, Rect, W, c, clicks, counts, draw, drawBoard, info, intro, knight, knightHops, logg, makeKnightHops, makeQueenHops, margin, mousePressed, moveKnight, newGame, placeQueen, queen, queenHops, r, range, reSize, rects, results, setup, showLittera, start, state, sum, taken, targets,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

range = _.range;

logg = console.log;

intro = `Select your queen.
Avoid the dots and the queen.
The ring will move when taken.
Repeat for all squares.`.split('\n');

sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

NOQUEEN = [3, 4, 10, 13, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 39, 41, 42, 43, 44, 45, 46, 50, 53, 59, 60];

N = 8;

W = 0;

H = 0;

R = Math.floor(W / 10);

c = (n) => {
  return modulo(n, N);
};

r = (n) => {
  return Math.floor(n / N);
};

rects = [];

Queen = '♛';

Knight = '♘';

queen = 0;

queenHops = []; // indexes of squares taken by queen

targets = []; // indexes of squares that knight must visit

state = 0;

margin = 0;

makeKnightHops = (knight) => {
  var c2, col, dc, dr, index, j, k, len, len1, r2, ref, ref1, res, row;
  if (knight === -1) {
    return [];
  }
  res = [];
  col = c(knight);
  row = r(knight);
  ref = [-2, -1, 1, 2];
  for (j = 0, len = ref.length; j < len; j++) {
    dc = ref[j];
    ref1 = [-2, -1, 1, 2];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      dr = ref1[k];
      if (abs(dc) === abs(dr)) {
        continue;
      }
      c2 = col + dc;
      r2 = row + dr;
      index = c2 + 8 * r2;
      if (indexOf.call(range(8), c2) >= 0 && indexOf.call(range(8), r2) >= 0 && indexOf.call(targets, index) >= 0) {
        res.push(index);
      }
    }
  }
  res.sort(function(a, b) {
    return a - b;
  });
  return res;
};

knight = 0;

knightHops = [];

clicks = 0;

counts = []; // number of clicks for each target

taken = 0;

results = ['Move the knight to the ring'];

start = 0;

window.onresize = function() {
  return reSize();
};

reSize = function() {
  var ci, col, index, j, len, ref, results1, ri, x, y;
  H = min(Math.floor(innerHeight / 13), Math.floor(innerWidth / 9));
  W = H;
  H = W;
  R = Math.floor(W / 10);
  resizeCanvas(innerWidth, innerHeight);
  rects = [];
  margin = (innerWidth - 10 * W) / 2 + Math.floor(W / 3);
  ref = range(N * N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    ri = r(index);
    ci = c(index);
    col = (ri + ci) % 2 ? 'darkgray' : 'lightgray';
    x = 3 * W / 2 + W * c(index);
    y = 3 * H / 2 + H * (7 - r(index));
    results1.push(rects.push(new Rect(index, margin + x, y, W, H, col)));
  }
  return results1;
};

makeQueenHops = () => {
  var ci, cq, dc, dr, i, j, len, ref, ri, rq;
  ref = range(N * N);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    ci = c(i);
    ri = r(i);
    cq = c(queen);
    rq = r(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    if (ci === cq || ri === rq || dc === dr) {
      queenHops.push(i);
    }
  }
  return logg({queenHops});
};

placeQueen = (index) => {
  logg('Q' + Position(index));
  if (NOQUEEN.includes(index)) {
    logg('No queen here');
    return;
  }
  queen = index;
  makeQueenHops();
  targets = range(N * N).filter((i) => {
    return !queenHops.includes(i);
  });
  targets.sort(function(a, b) {
    return b - a;
  });
  knight = targets[0];
  knightHops = makeKnightHops(knight);
  counts = [];
  taken++;
  return state++;
};

newGame = function() {
  queen = 0;
  queenHops = [];
  targets = [];
  state = 0;
  knight = 0;
  clicks = 0;
  counts = [];
  taken = 0;
  return start = new Date();
};

moveKnight = (index) => {
  var col, dx, dy, row;
  if (queenHops.includes(index)) {
    return;
  }
  col = c(index);
  row = r(index);
  dx = abs(col - c(knight));
  dy = abs(row - r(knight));
  if (indexOf.call(knightHops, index) >= 0) {
    knight = index;
    knightHops = makeKnightHops(knight);
    clicks++;
    if (targets[taken] === knight) {
      taken++;
      counts.push(clicks);
      clicks = 0;
    }
  }
  if (taken === targets.length) {
    results.push(`Q${Position(queen)}: ${sum(counts)} moves took ${(new Date() - start) / 1000} seconds`);
    return state = 2;
  }
};

Rect = class Rect {
  constructor(index1, x1, y1, w, h, col4) {
    this.ring = this.ring.bind(this);
    this.index = index1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.col = col4;
  }

  draw() {
    fill(this.col);
    return rect(this.x, this.y, this.w, this.h);
  }

  inside(x, y) {
    return abs(x - this.x) <= W / 2 && abs(y - this.y) <= H / 2;
  }

  click() {
    logg(this.index);
    if (state === 0) {
      return placeQueen(this.index);
    } else {
      return moveKnight(this.index);
    }
  }

  drawPiece(name) {
    textSize(1.1 * W);
    fill("black");
    return text(name, this.x, this.y + 0.1 * H);
  }

  drawQueenHop() {
    var ref;
    if (r(queen) % 2 === 0 && this.index !== queen && (ref = this.index, indexOf.call(queenHops, ref) >= 0)) {
      return ellipse(this.x, this.y, 3 * R);
    }
  }

  drawKnightHop() {
    var ref;
    if (c(queen) % 2 === 0 && (ref = this.index, indexOf.call(knightHops, ref) >= 0)) {
      return ellipse(this.x, this.y, 3 * R);
    }
  }

  text(txt) {
    textAlign(CENTER, CENTER);
    textSize(0.5 * W);
    fill('black');
    return text(txt, this.x, this.y);
  }

  ring() {
    noFill();
    push();
    strokeWeight(3);
    stroke('yellow');
    ellipse(this.x, this.y, 5 * R);
    return pop();
  }

};

setup = () => {
  reSize();
  newGame();
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  return createCanvas(innerWidth, innerHeight);
};

Position = function(index) {
  return `${"abcdefgh"[c(index)]}${"87654321"[r(index)]}`;
};

info = function() {
  var i, j, len, result, results1, temp;
  fill('black');
  textAlign(CENTER, CENTER);
  textSize(0.5 * W);
  temp = state === 0 ? intro : results;
  results1 = [];
  for (i = j = 0, len = temp.length; j < len; i = ++j) {
    result = temp[i];
    results1.push(text(result, Math.floor(innerWidth / 2), 10.5 * H + i * H / 2));
  }
  return results1;
};

drawBoard = () => {
  var j, len, rect, results1;
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    results1.push(rect.draw());
  }
  return results1;
};

showLittera = (flag) => {
  var col1, col2, col3, i, j, len, ref, results1, x, y;
  col1 = "black";
  col2 = "white";
  textSize(0.5 * W);
  ref = range(N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    x = W * (1.5 + i) + margin;
    y = W * (0.5 + N - i);
    col3 = flag ? [col2, col1][i % 2] : col1;
    noFill();
    if (flag && i % 2 === 0) {
      circle(x, W * (N + 1.5), 0.6 * W);
    }
    fill(col1);
    if (flag && i % 2 === 0) {
      circle(margin + W / 2, y, 0.6 * W);
    }
    text("abcdefgh"[i], x, W * (N + 1.5));
    if (i % 2 === 0) {
      fill(col3);
    } else {
      fill(col1);
    }
    results1.push(text("12345678"[i], margin + W / 2, y + 2));
  }
  return results1;
};

draw = () => {
  var i, j, k, l, len, len1, len2, len3, m, ref, ref1;
  background(128);
  drawBoard();
  showLittera(state === 0);
  info();
  textAlign(CENTER, CENTER);
  if (state > 0) {
    rects[queen].drawPiece(Queen);
    rects[knight].drawPiece(Knight);
  }
  textSize(0.55 * W);
  ref = range(taken);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (targets[i] !== knight) {
      rects[targets[i]].text(counts[i]);
    }
  }
  fill('black');
  for (k = 0, len1 = queenHops.length; k < len1; k++) {
    i = queenHops[k];
    rects[i].drawQueenHop();
  }
  fill('white');
  for (l = 0, len2 = knightHops.length; l < len2; l++) {
    i = knightHops[l];
    rects[i].drawKnightHop();
  }
  if (state === 0) {
    ref1 = range(N * N);
    for (m = 0, len3 = ref1.length; m < len3; m++) {
      i = ref1[m];
      if (!NOQUEEN.includes(i)) {
        rects[i].drawPiece(Queen);
      }
    }
  }
  if (state === 1) {
    return rects[targets[taken]].ring();
  }
};

mousePressed = function() {
  var j, len, rect, results1;
  if (state === 2) {
    newGame();
    return;
  }
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    if (rect.inside(mouseX, mouseY)) {
      results1.push(rect.click());
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-008-KnightMoves\coffee\sketch.coffee