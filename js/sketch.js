// Generated by CoffeeScript 2.5.1
var H, Knight, N, NOQUEEN, Queen, R, Rect, W, arrClicks, c, cirkel, clicks, draw, drawBoard, drawIllegals, drawPiece, illegal, info, knight, logg, makeIllegals, mousePressed, moveKnight, newGame, placeQueen, qPosition, queen, r, range, rects, results, setup, start, state, sum, taken, targets,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

range = _.range;

logg = console.log;

cirkel = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

NOQUEEN = [10, 13, 17, 18, 19, 20, 21, 22, 26, 29, 34, 37, 41, 42, 43, 44, 45, 46, 50, 53];

N = 8;

W = 0;

H = 0;

R = Math.floor(W / 10);

c = (n) => {
  return modulo(n, N);
};

r = (n) => {
  return Math.floor(n / N);
};

rects = [];

Queen = '♛';

Knight = '♘';

queen = 0;

illegal = []; // indexes of squares taken by queen

targets = []; // indexes of squares that knight must visit

state = 0;

knight = 0;

clicks = 0;

arrClicks = []; // number of clicks for each target

taken = 0;

results = [];

start = 0;

makeIllegals = () => {
  var ci, cq, dc, dr, i, j, len, ref, results1, ri, rq;
  ref = range(N * N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    ci = c(i);
    ri = r(i);
    cq = c(queen);
    rq = r(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    if (ci === cq || ri === rq || dc === dr) {
      results1.push(illegal.push(i));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

placeQueen = (index) => {
  if (NOQUEEN.includes(index)) {
    logg('No queen here');
    return;
  }
  queen = index;
  makeIllegals();
  targets = range(N * N).filter((i) => {
    return !illegal.includes(i);
  });
  knight = targets[0];
  arrClicks.push(0);
  taken++;
  state++;
  return results[results.length - 1] = 'Move the knight to the coin';
};

newGame = function() {
  queen = 0;
  illegal = [];
  targets = [];
  state = 0;
  knight = 0;
  clicks = 0;
  arrClicks = [];
  taken = 0;
  start = new Date();
  return results.push('Click on a square to place the queen');
};

moveKnight = (index) => {
  var col, dx, dy, row;
  if (illegal.includes(index)) {
    return;
  }
  col = c(index);
  row = r(index);
  dx = abs(col - c(knight));
  dy = abs(row - r(knight));
  if (dx * dx + dy * dy === 5) {
    knight = index;
    clicks++;
    if (targets[taken] === knight) {
      taken++;
      arrClicks.push(clicks);
      clicks = 0;
    }
  }
  if (taken === targets.length) {
    results.pop();
    results.push(`${qPosition()}: ${sum(arrClicks)} clicks took ${(new Date() - start) / 1000} seconds`);
    return state = 2;
  }
};

Rect = class Rect {
  constructor(index1, x1, y1, w, h, col1) {
    this.index = index1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.col = col1;
  }

  draw() {
    fill(this.col);
    return rect(this.x, this.y, this.w, this.h);
  }

  inside(x, y) {
    return (this.x <= x && x <= this.x + this.w) && (this.y <= y && y <= this.y + this.h);
  }

  click() {
    if (state === 0) {
      return placeQueen(this.index);
    } else {
      return moveKnight(this.index);
    }
  }

};

setup = () => {
  var ci, col, index, j, len, ref, results1, ri, x, y;
  W = Math.floor(innerWidth / 9);
  H = W;
  R = Math.floor(W / 10);
  newGame();
  textAlign(CENTER, CENTER);
  createCanvas(windowWidth, windowHeight);
  ref = range(N * N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    ri = r(index);
    ci = c(index);
    col = (ri + ci) % 2 ? 'yellow' : 'brown';
    x = W / 2 + W * c(index);
    y = H / 2 + H * r(index);
    results1.push(rects.push(new Rect(index, x, y, W, H, col)));
  }
  return results1;
};

qPosition = function() {
  return `Q${"abcdefgh"[c(queen)]}${"87654321"[r(queen)]}`;
};

info = function() {
  var i, j, len, result, results1;
  fill('black');
  textAlign(LEFT, CENTER);
  textSize(0.5 * W);
  results1 = [];
  for (i = j = 0, len = results.length; j < len; i = ++j) {
    result = results[i];
    results1.push(text(result, 0.5 * W, 9 * H + i * H / 2));
  }
  return results1;
};

drawBoard = () => {
  var j, len, rect, results1;
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    results1.push(rect.draw());
  }
  return results1;
};

drawIllegals = function() {
  var i, j, len, results1, x, y;
  results1 = [];
  for (j = 0, len = illegal.length; j < len; j++) {
    i = illegal[j];
    if (i !== queen) {
      x = W + W * c(i);
      y = H + H * r(i);
      results1.push(cirkel(x, y, R));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

drawPiece = function(piece, name) {
  var x, y;
  x = W + W * c(piece);
  y = H + H * r(piece);
  return text(name, x, y + 5);
};

draw = () => {
  var i, j, len, ref, x, y;
  background(128);
  drawBoard();
  info();
  textAlign(CENTER, CENTER);
  textSize(W);
  fill("black");
  if (state > 0) {
    drawPiece(queen, Queen);
    drawPiece(knight, Knight);
  }
  drawIllegals();
  textSize(0.55 * W);
  ref = range(taken);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    if (targets[i] !== knight) {
      x = W + W * c(targets[i]);
      y = H + H * r(targets[i]);
      text(arrClicks[i], x, y + 5);
    }
  }
  if (state === 1) {
    x = W + W * c(targets[taken]);
    y = H + H * r(targets[taken]);
    noFill();
    return cirkel(x, y, 2 * R);
  }
};

mousePressed = function() {
  var j, len, rect, results1;
  if (state === 2) {
    newGame();
    return;
  }
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    if (rect.inside(mouseX, mouseY)) {
      results1.push(rect.click());
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-008-KnightMoves\coffee\sketch.coffee