// Generated by CoffeeScript 2.5.1
var H, Knight, N, NOQUEEN, Position, Queen, R, Rect, W, arrClicks, c, clicks, draw, drawBoard, illegal, info, intro, knight, logg, makeIllegals, mousePressed, moveKnight, newGame, placeQueen, queen, r, range, reSize, rects, results, setup, start, state, sum, taken, targets,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

range = _.range;

logg = console.log;

// todo: visa minimalt antal drag i ringen
// todo: justera höjden av texten beroende på OS	
intro = `Select your queen.
Avoid the dots and the queen.
The ring will move when taken.
Repeat for all squares.
Qa8 is an easy starter, 118 moves.
Qd5 is a good challenge, 158 moves.`.split('\n');

sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

NOQUEEN = [3, 4, 10, 13, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 34, 37, 39, 41, 42, 43, 44, 45, 46, 50, 53, 59, 60];

N = 8;

W = 0;

H = 0;

R = Math.floor(W / 10);

c = (n) => {
  return 7 - modulo(n, N);
};

r = (n) => {
  return Math.floor(n / N);
};

rects = [];

Queen = '♛';

Knight = '♘';

queen = 0;

illegal = []; // indexes of squares taken by queen

targets = []; // indexes of squares that knight must visit

state = 0;

knight = 0;

clicks = 0;

arrClicks = []; // number of clicks for each target

taken = 0;

results = ['Move the knight to the ring'];

start = 0;

window.onresize = function() {
  return reSize();
};

reSize = function() {
  var ci, col, index, j, len, margin, ref, results1, ri, x, y;
  H = min(Math.floor(innerHeight / 13), Math.floor(innerWidth / 9));
  W = H;
  H = W;
  R = Math.floor(W / 10);
  resizeCanvas(innerWidth, innerHeight);
  rects = [];
  margin = Math.floor((innerWidth - 8 * W) / 2);
  ref = range(N * N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    index = ref[j];
    ri = r(index);
    ci = c(index);
    col = (ri + ci) % 2 ? 'brown' : 'yellow';
    x = W / 2 + W * c(index);
    y = H + H * r(index);
    results1.push(rects.push(new Rect(index, margin + x, y, W, H, col)));
  }
  return results1;
};

makeIllegals = () => {
  var ci, cq, dc, dr, i, j, len, ref, results1, ri, rq;
  ref = range(N * N);
  results1 = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    ci = c(i);
    ri = r(i);
    cq = c(queen);
    rq = r(queen);
    dc = abs(ci - cq);
    dr = abs(ri - rq);
    if (ci === cq || ri === rq || dc === dr) {
      results1.push(illegal.push(i));
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

placeQueen = (index) => {
  logg('Q' + Position(index));
  if (NOQUEEN.includes(index)) {
    logg('No queen here');
    return;
  }
  queen = index;
  makeIllegals();
  targets = range(N * N).filter((i) => {
    return !illegal.includes(i);
  });
  knight = targets[0];
  arrClicks.push(0);
  taken++;
  return state++;
};

newGame = function() {
  queen = 0;
  illegal = [];
  targets = [];
  state = 0;
  knight = 0;
  clicks = 0;
  arrClicks = [];
  taken = 0;
  return start = new Date();
};

moveKnight = (index) => {
  var col, dx, dy, row;
  if (illegal.includes(index)) {
    return;
  }
  col = c(index);
  row = r(index);
  dx = abs(col - c(knight));
  dy = abs(row - r(knight));
  if (dx * dx + dy * dy === 5) {
    knight = index;
    clicks++;
    if (targets[taken] === knight) {
      taken++;
      arrClicks.push(clicks);
      clicks = 0;
    }
  }
  if (taken === targets.length) {
    results.push(`Q${Position(queen)}: ${sum(arrClicks)} moves took ${(new Date() - start) / 1000} seconds`);
    return state = 2;
  }
};

Rect = class Rect {
  constructor(index1, x1, y1, w, h, col1) {
    this.coin = this.coin.bind(this);
    this.index = index1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.col = col1;
  }

  draw() {
    fill(this.col);
    return rect(this.x, this.y, this.w, this.h);
  }

  inside(x, y) {
    return abs(x - this.x) <= W / 2 && abs(y - this.y) <= H / 2;
  }

  click() {
    if (state === 0) {
      return placeQueen(this.index);
    } else {
      return moveKnight(this.index);
    }
  }

  drawPiece(name) {
    textSize(1.1 * W);
    fill("black");
    return text(name, this.x, this.y);
  }

  drawDot() {
    if (this.index !== queen && (r(queen) + c(queen)) % 2 === 1) {
      return ellipse(this.x, this.y, 2 * R);
    }
  }

  text(txt) {
    textAlign(CENTER, CENTER);
    textSize(0.5 * W);
    fill('black');
    return text(txt, this.x, this.y);
  }

  coin() {
    noFill();
    push();
    strokeWeight(3);
    ellipse(this.x, this.y, 5 * R);
    return pop();
  }

};

setup = () => {
  reSize();
  newGame();
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  return createCanvas(innerWidth, innerHeight);
};

Position = function(index) {
  return `${"abcdefgh"[c(index)]}${"87654321"[r(index)]}`;
};

info = function() {
  var i, j, len, result, results1, temp;
  fill('black');
  textAlign(CENTER, CENTER);
  textSize(0.5 * W);
  temp = state === 0 ? intro : results;
  results1 = [];
  for (i = j = 0, len = temp.length; j < len; i = ++j) {
    result = temp[i];
    results1.push(text(result, Math.floor(innerWidth / 2), 9 * H + i * H / 2));
  }
  return results1;
};

drawBoard = () => {
  var j, len, rect, results1;
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    results1.push(rect.draw());
  }
  return results1;
};

draw = () => {
  var i, j, k, l, len, len1, len2, ref, ref1;
  background(128);
  drawBoard();
  info();
  textAlign(CENTER, CENTER);
  if (state > 0) {
    rects[queen].drawPiece(Queen);
    rects[knight].drawPiece(Knight);
  }
  for (j = 0, len = illegal.length; j < len; j++) {
    i = illegal[j];
    rects[i].drawDot();
  }
  textSize(0.55 * W);
  ref = range(taken);
  for (k = 0, len1 = ref.length; k < len1; k++) {
    i = ref[k];
    if (targets[i] !== knight) {
      rects[targets[i]].text(arrClicks[i]);
    }
  }
  if (state === 0) {
    ref1 = range(N * N);
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      i = ref1[l];
      if (!NOQUEEN.includes(i)) {
        rects[i].drawPiece(Queen);
      }
    }
  }
  if (state === 1) {
    return rects[targets[taken]].coin();
  }
};

mousePressed = function() {
  var j, len, rect, results1;
  if (state === 2) {
    newGame();
    return;
  }
  results1 = [];
  for (j = 0, len = rects.length; j < len; j++) {
    rect = rects[j];
    if (rect.inside(mouseX, mouseY)) {
      results1.push(rect.click());
    } else {
      results1.push(void 0);
    }
  }
  return results1;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxZQUFBLEVBQUEsVUFBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxPQUFBO0VBQUE7O0FBQUEsS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFDVixJQUFBLEdBQU8sT0FBTyxDQUFDLElBRGY7Ozs7QUFNQSxLQUFBLEdBQVEsQ0FBQTs7Ozs7bUNBQUEsQ0FPTCxDQUFDLEtBUEksQ0FPRSxJQVBGOztBQVNSLEdBQUEsR0FBTSxDQUFDLEdBQUQsQ0FBQSxHQUFBO1NBQVMsR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBQSxHQUFBO1dBQVUsQ0FBQSxHQUFJO0VBQWQsQ0FBRCxDQUFYLEVBQThCLENBQTlCO0FBQVQ7O0FBRU4sT0FBQSxHQUFVLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxFQUFMLEVBQVEsRUFBUixFQUFXLEVBQVgsRUFBYyxFQUFkLEVBQWlCLEVBQWpCLEVBQW9CLEVBQXBCLEVBQXVCLEVBQXZCLEVBQTBCLEVBQTFCLEVBQTZCLEVBQTdCLEVBQWdDLEVBQWhDLEVBQW1DLEVBQW5DLEVB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TyxDQUFWO0lBQ0MsT0FBQSxDQUFBO0FBQ0EsV0FGRDs7QUFHQTtFQUFBLEtBQUEsdUNBQUE7O0lBQ0MsSUFBRyxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVosRUFBb0IsTUFBcEIsQ0FBSDtvQkFBbUMsSUFBSSxDQUFDLEtBQUwsQ0FBQSxHQUFuQztLQUFBLE1BQUE7NEJBQUE7O0VBREQsQ0FBQTs7QUFKYyIsInNvdXJjZXNDb250ZW50IjpbInJhbmdlID0gXy5yYW5nZVxyXG5sb2dnID0gY29uc29sZS5sb2dcclxuXHJcbiMgdG9kbzogdmlzYSBtaW5pbWFsdCBhbnRhbCBkcmFnIGkgcmluZ2VuXHJcbiMgdG9kbzoganVzdGVyYSBow7ZqZGVuIGF2IHRleHRlbiBiZXJvZW5kZSBww6UgT1NcdFxyXG5cclxuaW50cm8gPSBcIlwiXCJcclxuU2VsZWN0IHlvdXIgcXVlZW4uXHJcbkF2b2lkIHRoZSBkb3RzIGFuZCB0aGUgcXVlZW4uXHJcblRoZSByaW5nIHdpbGwgbW92ZSB3aGVuIHRha2VuLlxyXG5SZXBlYXQgZm9yIGFsbCBzcXVhcmVzLlxyXG5RYTggaXMgYW4gZWFzeSBzdGFydGVyLCAxMTggbW92ZXMuXHJcblFkNSBpcyBhIGdvb2QgY2hhbGxlbmdlLCAxNTggbW92ZXMuXHJcblwiXCJcIi5zcGxpdCgnXFxuJylcclxuXHJcbnN1bSA9IChhcnIpXHQ9PiBhcnIucmVkdWNlKCgoYSwgYikgPT4gYSArIGIpLCAwKVxyXG5cclxuTk9RVUVFTiA9IFszLDQsMTAsMTMsMTcsMTgsMTksMjAsMjEsMjIsMjQsMjYsMjksMzEsMzIsMzQsMzcsMzksNDEsNDIsNDMsNDQsNDUsNDYsNTAsNTMsNTksNjBdXHJcbk4gPSA4XHJcblcgPSAwXHJcbkggPSAwXHJcblIgPSBXLy8xMFxyXG5jID0gKG4pID0+IDcgLSBuICUlIE5cclxuciA9IChuKSA9PiBuIC8vIE5cclxucmVjdHMgPSBbXVxyXG5cclxuUXVlZW4gPSAn4pmbJ1xyXG5LbmlnaHQgPSAn4pmYJ1xyXG5xdWVlbiA9IDBcclxuaWxsZWdhbCA9IFtdICMgaW5kZXhlcyBvZiBzcXVhcmVzIHRha2VuIGJ5IHF1ZWVuXHJcbnRhcmdldHMgPSBbXSAjIGluZGV4ZXMgb2Ygc3F1YXJlcyB0aGF0IGtuaWdodCBtdXN0IHZpc2l0XHJcbnN0YXRlID0gMFxyXG5cclxua25pZ2h0ID0gMFxyXG5jbGlja3MgPSAwXHJcbmFyckNsaWNrcyA9IFtdXHQjIG51bWJlciBvZiBjbGlja3MgZm9yIGVhY2ggdGFyZ2V0XHJcbnRha2VuID0gMFxyXG5yZXN1bHRzID0gWydNb3ZlIHRoZSBrbmlnaHQgdG8gdGhlIHJpbmcnXVxyXG5cclxuc3RhcnQgPSAwXHJcblxyXG53aW5kb3cub25yZXNpemUgPSAtPiByZVNpemUoKVxyXG5cclxucmVTaXplID0gLT5cclxuXHRIID0gbWluKGlubmVySGVpZ2h0Ly8xMyxpbm5lcldpZHRoLy85KVxyXG5cdFcgPSBIXHJcblx0SCA9IFdcclxuXHRSID0gVy8vMTBcclxuXHRyZXNpemVDYW52YXMgaW5uZXJXaWR0aCwgaW5uZXJIZWlnaHRcclxuXHRyZWN0cyA9IFtdXHJcblx0bWFyZ2luID0gKGlubmVyV2lkdGgtOCpXKS8vMlxyXG5cdGZvciBpbmRleCBpbiByYW5nZSBOKk5cclxuXHRcdHJpID0gciBpbmRleFxyXG5cdFx0Y2kgPSBjIGluZGV4XHJcblx0XHRjb2wgPSBpZiAocmkgKyBjaSkgJSAyIHRoZW4gJ2Jyb3duJyBlbHNlICd5ZWxsb3cnXHJcblx0XHR4ID0gVy8yICsgVyAqIGMgaW5kZXhcclxuXHRcdHkgPSBIICsgSCAqIHIgaW5kZXhcclxuXHRcdHJlY3RzLnB1c2ggbmV3IFJlY3QgaW5kZXgsIG1hcmdpbit4LCB5LCBXLEgsIGNvbFxyXG5cclxubWFrZUlsbGVnYWxzID0gPT5cclxuXHRmb3IgaSBpbiByYW5nZSBOKk5cclxuXHRcdGNpID0gYyBpXHJcblx0XHRyaSA9IHIgaVxyXG5cdFx0Y3EgPSBjIHF1ZWVuXHJcblx0XHRycSA9IHIgcXVlZW5cclxuXHRcdGRjID0gYWJzIGNpIC0gY3FcclxuXHRcdGRyID0gYWJzIHJpIC0gcnFcclxuXHRcdGlmIGNpID09IGNxIG9yIHJpID09IHJxIG9yIGRjID09IGRyIHRoZW4gaWxsZWdhbC5wdXNoIGlcclxuXHJcbnBsYWNlUXVlZW4gPSAoaW5kZXgpID0+XHJcblx0bG9nZyAnUScgKyBQb3NpdGlvbiBpbmRleFxyXG5cdGlmIE5PUVVFRU4uaW5jbHVkZXMgaW5kZXhcclxuXHRcdGxvZ2cgJ05vIHF1ZWVuIGhlcmUnXHJcblx0XHRyZXR1cm5cclxuXHJcblx0cXVlZW4gPSBpbmRleFxyXG5cdG1ha2VJbGxlZ2FscygpXHJcblx0dGFyZ2V0cyA9IHJhbmdlKE4qTikuZmlsdGVyIChpKSA9PiBub3QgaWxsZWdhbC5pbmNsdWRlcyBpXHJcblx0a25pZ2h0ID0gdGFyZ2V0c1swXVxyXG5cdGFyckNsaWNrcy5wdXNoIDBcclxuXHR0YWtlbisrXHJcblx0c3RhdGUrK1xyXG5cclxubmV3R2FtZSA9ICgpIC0+XHJcblx0cXVlZW4gPSAwXHJcblx0aWxsZWdhbCA9IFtdXHJcblx0dGFyZ2V0cyA9IFtdXHJcblx0c3RhdGUgPSAwXHJcblx0a25pZ2h0ID0gMFxyXG5cdGNsaWNrcyA9IDBcclxuXHRhcnJDbGlja3MgPSBbXVxyXG5cdHRha2VuID0gMFxyXG5cdHN0YXJ0ID0gbmV3IERhdGUoKVxyXG5cclxubW92ZUtuaWdodCA9IChpbmRleCkgPT5cclxuXHRpZiBpbGxlZ2FsLmluY2x1ZGVzIGluZGV4IHRoZW4gcmV0dXJuXHJcblx0Y29sID0gYyBpbmRleFxyXG5cdHJvdyA9IHIgaW5kZXhcclxuXHRkeCA9IGFicyBjb2wgLSBjIGtuaWdodFxyXG5cdGR5ID0gYWJzIHJvdyAtIHIga25pZ2h0XHJcblx0aWYgZHgqZHggKyBkeSpkeSA9PSA1XHJcblx0XHRrbmlnaHQgPSBpbmRleFxyXG5cdFx0Y2xpY2tzKytcclxuXHRcdGlmIHRhcmdldHNbdGFrZW5dID09IGtuaWdodFxyXG5cdFx0XHR0YWtlbisrXHJcblx0XHRcdGFyckNsaWNrcy5wdXNoIGNsaWNrc1xyXG5cdFx0XHRjbGlja3MgPSAwXHJcblx0aWYgdGFrZW4gPT0gdGFyZ2V0cy5sZW5ndGhcclxuXHRcdHJlc3VsdHMucHVzaCBcIlEje1Bvc2l0aW9uIHF1ZWVufTogI3tzdW0oYXJyQ2xpY2tzKX0gbW92ZXMgdG9vayAjeyhuZXcgRGF0ZSgpLXN0YXJ0KS8xMDAwfSBzZWNvbmRzXCJcclxuXHRcdHN0YXRlID0gMlxyXG5cclxuY2xhc3MgUmVjdFxyXG5cdGNvbnN0cnVjdG9yIDogKEBpbmRleCwgQHgsQHksIEB3LEBoLCBAY29sKSAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0ZmlsbCBAY29sXHJcblx0XHRyZWN0IEB4LCBAeSwgQHcsIEBoXHJcblx0aW5zaWRlIDogKHgsIHkpIC0+IGFicyh4LUB4KSA8PSBXLzIgYW5kIGFicyh5LUB5KSA8PSBILzJcclxuXHRjbGljayA6IC0+IGlmIHN0YXRlPT0wIHRoZW4gcGxhY2VRdWVlbiBAaW5kZXggZWxzZSBtb3ZlS25pZ2h0IEBpbmRleFxyXG5cdGRyYXdQaWVjZSA6IChuYW1lKSAtPlxyXG5cdFx0dGV4dFNpemUgMS4xICogV1xyXG5cdFx0ZmlsbCBcImJsYWNrXCJcclxuXHRcdHRleHQgbmFtZSxAeCxAeVxyXG5cdGRyYXdEb3QgOiAtPiBpZiBAaW5kZXggIT0gcXVlZW4gYW5kIChyKHF1ZWVuKStjKHF1ZWVuKSkgJSAyID09IDEgdGhlbiBlbGxpcHNlIEB4LCBAeSwgMipSXHJcblx0dGV4dCA6ICh0eHQpIC0+XHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLCBDRU5URVJcclxuXHRcdHRleHRTaXplIDAuNSpXXHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdHRleHQgdHh0LCBAeCwgQHlcclxuXHRjb2luIDogPT5cclxuXHRcdG5vRmlsbCgpXHJcblx0XHRwdXNoKClcclxuXHRcdHN0cm9rZVdlaWdodCAzXHJcblx0XHRlbGxpcHNlIEB4LCBAeSwgNSpSXHJcblx0XHRwb3AoKVxyXG5cclxuc2V0dXAgPSA9PlxyXG5cdHJlU2l6ZSgpXHJcblx0bmV3R2FtZSgpXHJcblx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0dGV4dEFsaWduIENFTlRFUiwgQ0VOVEVSXHJcblx0Y3JlYXRlQ2FudmFzIGlubmVyV2lkdGgsIGlubmVySGVpZ2h0XHJcblxyXG5Qb3NpdGlvbiA9IChpbmRleCkgLT4gXCIje1wiYWJjZGVmZ2hcIltjIGluZGV4XX0je1wiODc2NTQzMjFcIltyIGluZGV4XX1cIlxyXG5cclxuaW5mbyA9IC0+XHJcblx0ZmlsbCAnYmxhY2snXHJcblx0dGV4dEFsaWduIENFTlRFUiwgQ0VOVEVSXHJcblx0dGV4dFNpemUgMC41KldcclxuXHR0ZW1wID0gaWYgc3RhdGU9PTAgdGhlbiBpbnRybyBlbHNlIHJlc3VsdHNcclxuXHRmb3IgcmVzdWx0LGkgaW4gdGVtcFxyXG5cdFx0dGV4dCByZXN1bHQsaW5uZXJXaWR0aC8vMiwgOSpIICsgaSpILzJcclxuXHJcbmRyYXdCb2FyZCA9ID0+XHJcblx0Zm9yIHJlY3QgaW4gcmVjdHNcclxuXHRcdHJlY3QuZHJhdygpXHJcblxyXG5kcmF3ID0gPT5cclxuXHRiYWNrZ3JvdW5kIDEyOFxyXG5cdGRyYXdCb2FyZCgpXHJcblx0aW5mbygpXHJcblxyXG5cdHRleHRBbGlnbiBDRU5URVIsIENFTlRFUlxyXG5cdGlmIHN0YXRlID4gMFxyXG5cdFx0cmVjdHNbcXVlZW5dLmRyYXdQaWVjZSBRdWVlblxyXG5cdFx0cmVjdHNba25pZ2h0XS5kcmF3UGllY2UgS25pZ2h0XHJcblxyXG5cdGZvciBpIGluIGlsbGVnYWxcclxuXHRcdHJlY3RzW2ldLmRyYXdEb3QoKVxyXG5cclxuXHR0ZXh0U2l6ZSAwLjU1KldcclxuXHRmb3IgaSBpbiByYW5nZSB0YWtlblxyXG5cdFx0aWYgdGFyZ2V0c1tpXSAhPSBrbmlnaHRcclxuXHRcdFx0cmVjdHNbdGFyZ2V0c1tpXV0udGV4dCBhcnJDbGlja3NbaV1cclxuXHJcblx0aWYgc3RhdGUgPT0gMFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UoTipOKVxyXG5cdFx0XHRpZiBub3QgTk9RVUVFTi5pbmNsdWRlcyBpXHJcblx0XHRcdFx0cmVjdHNbaV0uZHJhd1BpZWNlKFF1ZWVuKVxyXG5cclxuXHRpZiBzdGF0ZSA9PSAxXHJcblx0XHRyZWN0c1t0YXJnZXRzW3Rha2VuXV0uY29pbigpXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPlxyXG5cdGlmIHN0YXRlPT0yXHJcblx0XHRuZXdHYW1lKClcclxuXHRcdHJldHVyblxyXG5cdGZvciByZWN0IGluIHJlY3RzXHJcblx0XHRpZiByZWN0Lmluc2lkZSBtb3VzZVgsIG1vdXNlWSB0aGVuIHJlY3QuY2xpY2soKVxyXG4iXX0=
//# sourceURL=c:\github\2023-008-KnightMoves\coffee\sketch.coffee